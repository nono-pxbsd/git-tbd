#!/bin/bash
# tests/unit/core/test_validation.sh

set -o pipefail

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
PROJECT_DIR="$(cd "$SCRIPT_DIR/../../.." && pwd)"

source "${PROJECT_DIR}/lib/config.sh"
source "${PROJECT_DIR}/lib/core/logging.sh"
source "${PROJECT_DIR}/lib/core/validation.sh"

TESTS_RUN=0
TESTS_PASSED=0

assert_true() {
  local test_name="$1"
  ((TESTS_RUN++))
  echo "‚úÖ $test_name"
  ((TESTS_PASSED++))
}

assert_false() {
  local test_name="$1"
  ((TESTS_RUN++))
  echo "‚ùå $test_name"
}

assert_equals() {
  local actual="$1"
  local expected="$2"
  local test_name="$3"
  
  ((TESTS_RUN++))
  
  if [[ "$actual" == "$expected" ]]; then
    echo "‚úÖ $test_name"
    ((TESTS_PASSED++))
  else
    echo "‚ùå $test_name"
    echo "   Attendu: $expected"
    echo "   Re√ßu: $actual"
    return 1
  fi
}

echo "üß™ Tests unitaires : validation.sh"
echo "==================================="
echo ""

# Test 1: is_valid_branch_type
echo "Test 1: is_valid_branch_type"
if is_valid_branch_type "feature" 2>/dev/null; then
  assert_true "feature est un type valide"
else
  assert_false "feature devrait √™tre valide"
fi

if is_valid_branch_type "invalid" 2>/dev/null; then
  assert_false "invalid devrait √™tre invalide"
else
  assert_true "invalid est rejet√©"
fi
echo ""

# Test 2: is_valid_branch_name
echo "Test 2: is_valid_branch_name"
if is_valid_branch_name "login-form" 2>/dev/null; then
  assert_true "'login-form' est valide"
else
  assert_false "'login-form' devrait √™tre valide"
fi

if is_valid_branch_name "ab" 2>/dev/null; then
  assert_false "'ab' (trop court) devrait √™tre invalide"
else
  assert_true "'ab' est rejet√©"
fi

if is_valid_branch_name "test--double" 2>/dev/null; then
  assert_false "'test--double' devrait √™tre invalide"
else
  assert_true "'test--double' est rejet√©"
fi
echo ""

# Test 3: normalize_branch_name
echo "Test 3: normalize_branch_name"
result=$(normalize_branch_name "Feature Login Form")
assert_equals "$result" "feature-login-form" "Normalisation avec espaces"

result=$(normalize_branch_name "TEST_underscore")
assert_equals "$result" "test-underscore" "Normalisation avec underscore"

result=$(normalize_branch_name "sp√©cial-√ß√†racters")
expected="special-caracters"
# Le r√©sultat peut varier selon iconv, on v√©rifie juste qu'il est normalis√©
if [[ "$result" =~ ^[a-z0-9-]+$ ]]; then
  assert_true "Normalisation des caract√®res sp√©ciaux"
else
  assert_false "Normalisation des caract√®res sp√©ciaux a √©chou√©"
fi
echo ""

# Test 4: get_branch_icon
echo "Test 4: get_branch_icon"
icon=$(get_branch_icon "feature")
if [[ -n "$icon" ]]; then
  assert_true "get_branch_icon('feature') retourne une ic√¥ne"
else
  assert_false "get_branch_icon('feature') devrait retourner une ic√¥ne"
fi

icon=$(get_branch_icon "fix")
if [[ -n "$icon" ]]; then
  assert_true "get_branch_icon('fix') retourne une ic√¥ne"
else
  assert_false "get_branch_icon('fix') devrait retourner une ic√¥ne"
fi
echo ""

# R√©sum√©
echo "==================================="
echo "Tests: $TESTS_RUN"
echo "R√©ussis: $TESTS_PASSED"

if [[ $TESTS_RUN -eq $TESTS_PASSED ]]; then
  echo "‚úÖ Tous les tests passent"
  exit 0
else
  echo "‚ùå Certains tests ont √©chou√©"
  exit 1
fi