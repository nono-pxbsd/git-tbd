#!/bin/bash

# git-tbd : un mini outil CLI pour gérer un workflow Trunk-Based Development 🚀

BOLD="\e[1m"
GREEN="\e[32m"
YELLOW="\e[33m"
RESET="\e[0m"

# Définition des types et icônes
BRANCH_TYPES=("feature" "fix" "hotfix" "chore")
declare -A BRANCH_ICONS=(
  [feature]="✨ feat"
  [fix]="🐛 fix"
  [hotfix]="🚑 hotfix"
  [chore]="🧹 chore"
)

function print_help() {
  echo -e "${BOLD}git-tbd${RESET} - CLI pour workflow Trunk-Based Development\n"
  echo "Usage :"
  echo "  git-tbd start              → Sélection interactive du type de branche à créer"
  echo "  git-tbd finish             → Merge dans main + suppression de la branche"
  echo "  git-tbd sync               → Met à jour la branche courante depuis main"
  echo "  git-tbd pr                 → Ouvre une Pull Request automatiquement"
  echo "  git-tbd bump <type>        → Bump la version (major, minor, patch)"
  echo "  git-tbd help               → Affiche cette aide"
}

create_branch() {
  local type="$1"
  local name="$2"

  if [[ -z "$type" || -z "$name" ]]; then
    echo -e "${YELLOW}⚠️  Type ou nom de branche manquant.${RESET}"
    return 1
  fi

  # Bascule sur main à jour
  git checkout main &>/dev/null || {
    echo -e "${YELLOW}⚠️  La branche main est introuvable.${RESET}"
    return 1
  }
  git pull &>/dev/null

  local full_branch="${type}/${name}"
  git checkout -b "$full_branch"
  echo -e "${GREEN}✅ Branche créée : ${full_branch}${RESET}"
}

# Fonction start générique
start() {
  local input="$1"
  local branch_type=""
  local name=""

  if [[ -n "$input" && "$input" == */* ]]; then
    branch_type="${input%%/*}"
    name="${input#*/}"
  fi

  # Si aucun type fourni, demande interactive avec fzf
  if [[ -z "$branch_type" || -z "$name" ]]; then
    if ! command -v fzf >/dev/null; then
      echo -e "${YELLOW}⚠️  La commande 'fzf' est requise si aucun argument n'est passé.${RESET}"
      return 1
    fi
    branch_type=$(printf "%s\n" "${BRANCH_TYPES[@]}" | fzf --prompt="🧭 Type de branche ? > " --height=10%)
    [[ -z "$branch_type" ]] && { echo -e "${YELLOW}⚠️  Aucun type sélectionné.${RESET}"; return 1; }
    echo -ne "📝 Nom de la branche : "
    read name
    [[ -z "$name" ]] && { echo -e "${YELLOW}⚠️  Nom requis.${RESET}"; return 1; }
  fi

  create_branch "$branch_type" "$name"
}

start_feature() {
  local name="$1"
  if [ -z "$name" ]; then
    echo -e "${YELLOW}⚠️  Tu dois spécifier un nom de feature.${RESET}"
    exit 1
  fi
  create_branch "feature" "$name"
}

# Fonction finish universelle
finish() {
  local type=""
  local name=""
  local current=$(git rev-parse --abbrev-ref HEAD)

  # Déduction depuis la branche actuelle
  if [[ $# -eq 0 ]]; then
    type="${current%%/*}"
    name="${current#*/}"
  elif [[ $# -eq 1 ]]; then
    if [[ "$1" == */* ]]; then
      type="${1%%/*}"
      name="${1#*/}"
    else
      type="$1"
      name="${current#*/}"
    fi
  elif [[ $# -eq 2 ]]; then
    type="$1"
    name="$2"
  else
    echo -e "${YELLOW}⚠️  Trop d'arguments. Usage : finish [type[/name] | type name]${RESET}"
    return 1
  fi

  # Validation du type
  if [[ ! "$type" =~ ^(feature|fix|hotfix|chore)$ ]]; then
    echo -e "${YELLOW}⚠️  Type non supporté : $type${RESET}"
    return 1
  fi

  local branch="${type}/${name}"
  local label="${type}(${name})"

  echo -e "${GREEN}🔁 Fusion de la branche ${branch} dans main...${RESET}"
  git checkout main && git pull
  git merge --no-ff "$branch" -m "$label: merge ${type} into main"
  git branch -d "$branch"
  git push origin --delete "$branch" 2>/dev/null || true
  echo -e "${GREEN}✅ Branche ${branch} fusionnée et supprimée.${RESET}"
}

function sync_branch() {
  git fetch origin
  git rebase origin/main
  echo -e "${GREEN}🔄 Branche synchronisée avec main.${RESET}"
}

function open_pr() {
  local branch=$(git rev-parse --abbrev-ref HEAD)

  branch_type=$(echo "$branch" | cut -d'/' -f1)
  branch_name=${branch#"$branch_type"/}

  case "$branch_type" in
    feature) prefix="✨ feat" ;;
    fix)     prefix="🐛 fix" ;;
    hotfix)  prefix="🚒 hotfix" ;;  # à adapter si tu veux différencier
    chore)   prefix="🧹 chore" ;;
    *)
      echo -e "${YELLOW}⚠️  Tu dois être sur une branche (feature|fix|hotfix|chore)/* pour créer une PR.${RESET}"
      exit 1
    ;;
  esac

  local title="${prefix}(${branch_name})"
  local body="${2:-Pull request automatique depuis \`$branch\` vers \`main\`}"

  # Push si nécessaire
  git push -u origin "$branch"

  # Création de la PR via GitHub CLI
  gh pr create --base main --head "$branch" --title "$title" --body "$body"

  # Récupération du lien vers la PR
  local url=$(gh pr view --json url -q ".url")
  echo -e "${GREEN}✅ PR créée depuis $branch vers main${RESET}"
  echo -e "🔗 Lien : ${BOLD}${url}${RESET}"
}

# Dispatcher
case "$1" in
  start)
    shift
    start "$1"
    ;;
  finish)
    shift
    finish "$@"
    ;;
  start_feature)
    shift
    start_feature "$1"
    ;;
  pr)
    shift
    open_pr "$@"
    ;;
  help | *)
    print_help
    ;;
esac
