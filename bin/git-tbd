#!/bin/bash

# git-tbd : un mini outil CLI pour g√©rer un workflow Trunk-Based Development üöÄ

BOLD="\e[1m"
GREEN="\e[32m"
YELLOW="\e[33m"
RESET="\e[0m"

function print_help() {
  echo -e "${BOLD}git-tbd${RESET} - CLI pour workflow Trunk-Based Development\n"
  echo "Usage:"
  echo "  git-tbd start <feature-name>   ‚Üí Cr√©e une branche feature/<feature-name>"
  echo "  git-tbd finish                 ‚Üí Merge dans main + suppression de la branche"
  echo "  git-tbd sync                   ‚Üí Met √† jour la branche courante depuis main"
  echo "  git-tbd help                   ‚Üí Affiche cette aide"
}

function start_feature() {
  local name="$1"
  if [ -z "$name" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Tu dois sp√©cifier un nom de feature.${RESET}"
    exit 1
  fi
  git checkout main && git pull
  git checkout -b "feature/$name"
  echo -e "${GREEN}‚úÖ Branche cr√©√©e : feature/$name${RESET}"
}

function finish_feature() {
  local current=$(git rev-parse --abbrev-ref HEAD)
  if [[ "$current" != feature/* ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Tu dois √™tre sur une branche feature/* pour finir.${RESET}"
    exit 1
  fi
  git checkout main && git pull
  git merge --no-ff "$current" -m "Merge $current"
  git branch -d "$current"
  git push
  echo -e "${GREEN}‚úÖ Feature merg√©e et supprim√©e : $current${RESET}"
}

function sync_branch() {
  git fetch origin
  git rebase origin/main
  echo -e "${GREEN}üîÑ Branche synchronis√©e avec main.${RESET}"
}

# Dispatcher
case "$1" in
  start)
    shift
    start_feature "$1"
    ;;
  finish)
    finish_feature
    ;;
  sync)
    sync_branch
    ;;
  help | *)
    print_help
    ;;
esac
