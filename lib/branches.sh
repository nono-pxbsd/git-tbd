#!/bin/bash

# D√©finition des types et ic√¥nes de branches
# Types de branches support√©s : feature, fix, hotfix, chore, refactor, test, doc
# Ic√¥nes associ√©es pour une meilleure lisibilit√©
BRANCH_TYPES=("feature" "fix" "hotfix" "chore")
declare -A BRANCH_ICONS=(
  [feature]="‚ú®"
  [fix]="üêõ"
  [chore]="üßπ"
  [refactor]="üî®"
  [test]="‚úÖ"
  [doc]="üìö"
)

# Cr√©e une branche √† partir du type et du nom
# Usage : create_branch <type> <name>
# Exemple : create_branch feature my-feature
# Si le type ou le nom est manquant, affiche un message d'erreur
# Si la branche main n'existe pas, affiche un message d'erreur
# Si la branche est cr√©√©e avec succ√®s, affiche un message de succ√®s
# Si la branche existe d√©j√†, affiche un message d'avertissement
# Si la branche est cr√©√©e, bascule sur cette branche
# Si la branche est cr√©√©e, affiche un message de succ√®s
create_branch() {
  local type="$1"
  local name="$2"

  if [[ -z "$type" || -z "$name" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Type ou nom de branche manquant.${RESET}"
    return 1
  fi

  # Bascule sur main √† jour
  git checkout main &>/dev/null || {
    echo -e "${YELLOW}‚ö†Ô∏è  La branche main est introuvable.${RESET}"
    return 1
  }
  git pull &>/dev/null

  local full_branch="${type}/${name}"
  git checkout -b "$full_branch"
  echo -e "${GREEN}‚úÖ Branche cr√©√©e : ${full_branch}${RESET}"
}

# G√©n√©ration des fonctions de d√©marrage pour chaque type de branche
# Usage : start_feature my-feature
# Exemple : start_feature my-feature
generate_start_functions() {
    for type in "${!BRANCH_TYPES[@]}"; do
    eval "
    start_${type}() {
        local name=\"\$1\"
        if [[ -z \"\$name\" ]]; then
        echo -e \"\${YELLOW}‚ö†Ô∏è  Tu dois sp√©cifier un nom de ${type}.\${RESET}\"
        exit 1
        fi
        create_branch \"${type}\" \"\$name\"
    }
    "
    done
}

# Fonction pour obtenir l'ic√¥ne associ√©e √† un type de branche
# Usage : get_branch_icon <type>
# Exemple : get_branch_icon feature
# Retourne l'ic√¥ne associ√©e ou un message d'erreur si le type n'est pas support√©
# Si le type n'existe pas, retourne une ic√¥ne par d√©faut
get_branch_icon() {
  local type="$1"
  echo "${BRANCH_ICONS[$type]}"
}

# V√©rifie si une branche existe sur le d√©p√¥t distant
# Usage : remote_branch_exists <branch>
# Exemple : remote_branch_exists feature/my-feature
# Retourne 0 si la branche existe, 1 sinon
# Utilise git ls-remote pour v√©rifier l'existence de la branche
# Si la branche existe, retourne 0, sinon retourne 1
remote_branch_exists () {
  local branch="$1"
  git ls-remote --heads origin "$branch" | grep -q "$branch"
}

# Supprime une branche distante si elle existe
# Usage : delete_remote_branch <branch>
# Exemple : delete_remote_branch feature/my-feature
# V√©rifie si la branche existe sur le d√©p√¥t distant
# Si la branche existe, utilise git push origin --delete pour la supprimer
# Redirige les erreurs vers /dev/null pour √©viter les messages inutiles
# Affiche un message de succ√®s ou d'avertissement selon le r√©sultat
delete_remote_branch() {
  local branch="$1"
  if remote_branch_exists "$branch"; then
    git push origin --delete "$branch" 2>/dev/null || true
    echo -e "${YELLOW}üóëÔ∏è  Branche distante ${branch} supprim√©e.${RESET}"
  fi
}

# Synchronise la branche courante avec la branche de base (par d√©faut main)
# Usage : sync_current_branch [--base=<branch>] [--force]
# Exemple : sync_current_branch --base=develop --force
# V√©rifie si la branche courante est √† jour avec la branche de base
# Si la branche courante est en avance et que --force n'est pas utilis√©, affiche un avertissement
# Si la branche courante est en avance et que --force est utilis√©, effectue un rebase
# Affiche un message de succ√®s ou d'√©chec selon le r√©sultat du rebase

sync_current_branch() {
  local force=false
  local base_branch="main"

  for arg in "$@"; do
    case "$arg" in
      --base=*) base_branch="${arg#*=}" ;;
      --force) force=true ;;
    esac
  done

  local current_branch=$(git symbolic-ref --short HEAD)
  echo -e "${BLUE}üîÑ Synchronisation de ${current_branch} avec ${base_branch}...${RESET}"

  git fetch origin &>/dev/null

  # V√©rifie les commits en avance et en retard
  local ahead=$(git rev-list --left-only --count "$current_branch"..."origin/${base_branch}")
  local behind=$(git rev-list --right-only --count "$current_branch"..."origin/${base_branch}")

  if [[ "$ahead" -eq 0 && "$behind" -eq 0 ]]; then
    echo -e "${GREEN}‚úÖ ${current_branch} est d√©j√† synchronis√©e avec ${base_branch}.${RESET}"
    return 0
  fi

  if [[ "$behind" -gt 0 ]]; then
    if [[ "$force" = false ]]; then
      echo -e "${YELLOW}‚ö†Ô∏è  Des commits sont pr√©sents sur ${base_branch} mais pas sur ${current_branch}. Utilise --force pour forcer le rebase.${RESET}"
      return 1
    else
      echo -e "${YELLOW}‚ö†Ô∏è  Rebase forc√© malgr√© des commits en retard sur ${current_branch}.${RESET}"
    fi
  fi

  git rebase "origin/${base_branch}" &&
    echo -e "${GREEN}‚úÖ ${current_branch} synchronis√©e avec ${base_branch}.${RESET}" ||
    echo -e "${RED}‚ùå √âchec de la synchronisation avec ${base_branch}.${RESET}"
}
